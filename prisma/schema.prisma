// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id        String   @id @default(uuid())
  username  String
  email     String   @unique
  password  String
  role      Role     @default(GENERAL)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  description String?
  MovieComment     MovieComment[]
  MovieCommentLike MovieCommentLike[]
}


enum Role {
  GENERAL
  ADMIN
}

model Movie {
  id          String      @id @default(uuid())
  createdAt   DateTime @default(now())
  description String?
  updatedAt DateTime @default(now())
  title     String?
  movieComment MovieComment[]
}

model MovieComment {
  id          String      @id @default(uuid())
  createdAt   DateTime @default(now())
  description String?
  // user who liked the comment
  likedBy MovieCommentLike[]
  // movie which was commented
  Movie   Movie? @relation(fields: [movieId], references: [id])
  movieId String?
  // user who created a comment
  User   User? @relation(fields: [userId], references: [id])
  userId String?
}

model MovieCommentLike {
  id        String      @id @default(uuid())
  createdAt DateTime @default(now())
  // user who liked the comment
  User   User? @relation(fields: [userId], references: [id])
  userId String?
  // comment that was liked
  MovieComment   MovieComment? @relation(fields: [movieCommentId], references: [id])
  movieCommentId String?
}

// model User {
//   id          Int      @id @default(autoincrement())
//   createdAt   DateTime @default(now())
  
// }